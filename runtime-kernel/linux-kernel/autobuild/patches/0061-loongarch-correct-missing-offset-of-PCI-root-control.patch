From 5b74ccd4df2cfb74afd7c566f1c9cabdcf4bd611 Mon Sep 17 00:00:00 2001
From: Miao Wang <shankerwangmiao@gmail.com>
Date: Wed, 24 Jul 2024 09:06:27 +0800
Subject: [PATCH 061/100] loongarch: correct missing offset of PCI root
 controller in DSDT table

On machines with legacy firmware with BPI version BPI01000, the PCI root
controller information in the DSDT table lacks AddressTranslation in its
WordIO resource defination, causing the failure of the registration for the
LIO address space. This patch corrects this issue when the given offset
is zero for the PCI root controller.

This patch also fixes the lack of the leading 16K, i.e. ISA_IOSIZE, in
the defination of WordIO resource. This is because that address range is
registered unconditionally on the legacy loongarch linux port.

This patch also fixes the start addresses or end addresses of WordIO
resource not aligned to the page size by rouding the addresses up to the
nearest page starting.

The above behavior is only enabled when BPI data and the BPI01000 version
is detected.

Ref: https://github.com/shankerwangmiao/linux/commit/0a8e8d2d3c88430d8b7b8004852ea95587dc81f1
---
 arch/loongarch/include/asm/acpi.h   |  2 ++
 arch/loongarch/kernel/legacy_boot.c | 23 ++++++++++++++++++++++-
 drivers/acpi/pci_root.c             |  1 +
 include/linux/pci-acpi.h            |  4 ++++
 4 files changed, 29 insertions(+), 1 deletion(-)

diff --git a/arch/loongarch/include/asm/acpi.h b/arch/loongarch/include/asm/acpi.h
index ba78288a26e3f..c954d15d0a47c 100644
--- a/arch/loongarch/include/asm/acpi.h
+++ b/arch/loongarch/include/asm/acpi.h
@@ -49,6 +49,8 @@ static inline u32 get_acpi_id_for_cpu(unsigned int cpu)
 extern void acpi_arch_os_table_override (struct acpi_table_header *existing_table, struct acpi_table_header **new_table);
 #define ACPI_HAVE_ARCH_TABLE_INIT_COMPLETE
 extern void acpi_arch_table_init_complete(void);
+#define ACPI_HAVE_ARCH_PCI_ROOT_RES_FILTER
+extern void acpi_arch_pci_probe_root_dev_filter(struct resource_entry *entry);
 
 #endif /* !CONFIG_ACPI */
 
diff --git a/arch/loongarch/kernel/legacy_boot.c b/arch/loongarch/kernel/legacy_boot.c
index 841d8db85a3cb..7043bfd0399d6 100644
--- a/arch/loongarch/kernel/legacy_boot.c
+++ b/arch/loongarch/kernel/legacy_boot.c
@@ -60,7 +60,7 @@ struct loongarch_bpi_info __initdata loongarch_bpi_info = {
 	.bpi = EFI_INVALID_TABLE_ADDR,
 };
 
-static enum bpi_vers __initdata bpi_version = BPI_VERSION_NONE;
+static enum bpi_vers bpi_version = BPI_VERSION_NONE;
 static u64 __initdata bpi_flags = 0;
 
 static int have_bpi = 0;
@@ -596,6 +596,27 @@ void acpi_arch_os_table_override (struct acpi_table_header *existing_table, stru
 	}
 }
 
+void acpi_arch_pci_probe_root_dev_filter(struct resource_entry *entry)
+{
+	if (bpi_version == BPI_VERSION_NONE) {
+		return;
+	}
+	if (bpi_version > BPI_VERSION_V1) {
+		return;
+	}
+
+	if (entry->res->flags & IORESOURCE_IO) {
+		if (entry->offset == 0) {
+			if (entry->res->start == ISA_IOSIZE) {
+				entry->res->start = 0;
+			}
+			entry->offset = LOONGSON_LIO_BASE;
+			entry->res->start = LOONGSON_LIO_BASE + PFN_ALIGN(entry->res->start);
+			entry->res->end = LOONGSON_LIO_BASE + PFN_ALIGN(entry->res->end + 1) - 1;
+		}
+	}
+}
+
 int loongarch_have_legacy_bpi (void){
 	return have_bpi;
 }
diff --git a/drivers/acpi/pci_root.c b/drivers/acpi/pci_root.c
index d0bfb37068019..cbb916be29764 100644
--- a/drivers/acpi/pci_root.c
+++ b/drivers/acpi/pci_root.c
@@ -909,6 +909,7 @@ int acpi_pci_probe_root_resources(struct acpi_pci_root_info *info)
 			"no IO and memory resources present in _CRS\n");
 	else {
 		resource_list_for_each_entry_safe(entry, tmp, list) {
+			acpi_arch_pci_probe_root_dev_filter(entry);
 			if (entry->res->flags & IORESOURCE_IO)
 				acpi_pci_root_remap_iospace(&device->fwnode,
 						entry);
diff --git a/include/linux/pci-acpi.h b/include/linux/pci-acpi.h
index 078225b514d48..1c22ca4ec794c 100644
--- a/include/linux/pci-acpi.h
+++ b/include/linux/pci-acpi.h
@@ -133,6 +133,10 @@ static inline void pci_acpi_remove_edr_notifier(struct pci_dev *pdev) { }
 int pci_acpi_set_companion_lookup_hook(struct acpi_device *(*func)(struct pci_dev *));
 void pci_acpi_clear_companion_lookup_hook(void);
 
+#ifndef ACPI_HAVE_ARCH_PCI_ROOT_RES_FILTER
+static inline void acpi_arch_pci_probe_root_dev_filter(struct resource_entry *entry) { }
+#endif
+
 #else	/* CONFIG_ACPI */
 static inline void acpi_pci_add_bus(struct pci_bus *bus) { }
 static inline void acpi_pci_remove_bus(struct pci_bus *bus) { }
-- 
2.46.0

